#!/bin/bash

CONFIGURATION_FILE="$DIR/mostro.conf"
CONFIGURATION_FILE_TEMPLATE="${CONFIGURATION_FILE}.template"

MINUTE_TIMESTAMP=$(($(date "+%s") / 60))
GLOBALRETURNCODE=0

if [ -z "$CONCURRENCY" ]
then
  CONCURRENCY=4
fi

if [ -z "$TIMEOUT" ]
then
  TIMEOUT=10
fi

function error_log () {
  echo "$@" 1>&2;
}

function cmd_output {
  echo "$@" | sed "s/^/  > /"
}

function bold() {
  echo -ne "\033[1m${@}\033[0m"
  tput sgr0
}

function red() {
  echo -ne '\E[0;31m'"\033[1m${@}\033[0m"
  tput sgr0
}

function green() {
  echo -ne '\E[0;32m'"\033[1m${@}\033[0m"
  tput sgr0
}

function confirm () {
  QUESTION="$1"
  DEFAULT="${2:N}"

  if [ "$DEFAULT" = "Y" ]
  then
    OTHER="N"
  else
    OTHER="Y"
  fi

  echo -n "$QUESTION ["

  if [ "$DEFAULT" = "Y" ]
  then
    bold Y
  else
    echo -n y
  fi

  echo -n "/"

  if [ "$DEFAULT" = "N" ]
  then
    bold N
  else
    echo -n n
  fi

  if [ -n "$YES_TO_ALL" ]
  then
    echo "] $DEFAULT"
    return 0
  else
    read -n1 -p "] " CONFIRMATION
  fi

  if [[ ! -z "$CONFIRMATION" ]]
  then
    echo
  fi

  if [[ "$CONFIRMATION" = "$OTHER" || "$CONFIRMATION" = "${OTHER,,}" ]]
  then
    return 1
  else
    return 0
  fi
}

function update_return_code() {
  if [ "$1" -gt "$GLOBALRETURNCODE" ]
  then
    GLOBALRETURNCODE="$1"
  fi
}

ENABLED_CHECKS=()

# The actual run is done by the run_check function.
function RUN() {
  CMD=$1
  shift

  OPTIONS="$@"

  if [ -f "checks/$CMD" ]
  then
    ENABLED_CHECKS+=("checks/$CMD $OPTIONS")
  else
    ENABLED_CHECKS+=("$CMD $OPTIONS")
  fi
}

function run_enabled_checks() {
  for check in "${ENABLED_CHECKS[@]}"
  do
    run_check "$check"
  done

  return $GLOBALRETURNCODE
}

function print_error() {
  echo "# ERROR: $1">&1
}

function run_check() {
  CMD=$1

  if hash timeout 2>/dev/null
  then
    OUTPUT=$(timeout $TIMEOUT /bin/sh -c "$CMD" 2> >(while read LINE; do print_error "$LINE"; done))
  else
    OUTPUT=$(/bin/sh -c "$CMD" 2> >(while read LINE; do print_error "$LINE"; done))
  fi

  RETURNCODE=$?

  if ! [[ "$OUTPUT" =~ ^--- ]]
  then
    echo "---"
  fi

  echo "$OUTPUT"

  if [ "$RETURNCODE" != "0" ]
  then
    if [ "$RETURNCODE" = "124" ]
    then
      print_error "\"${CMD}\" took too long (timeout after $TIMEOUT seconds)"
    else
      print_error "Error (return code: $RETURNCODE) while running \"${CMD}\""
    fi

    print_error "You can debug by running the check standalone: ${DIR}/${CHECK}"
  fi

  update_return_code $RETURNCODE

  return $RETURNCODE
}
