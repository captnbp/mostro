#!/bin/bash

export LANG=C

function blockquote {
  echo "$@" | sed "s/^/  > /"
}

function formatted_echo() {
  local ECHO_OPTIONS

  local CODE="$1"
  shift

  if [ "$1" = "-n" ]
  then
    ECHO_OPTIONS="$1"
    shift
  fi

  echo $ECHO_OPTIONS -e "${CODE}${@}\033[0m"

  tput sgr0
}

function bold() {
  formatted_echo "\033[1m" "${@}"
}

function red() {
  formatted_echo '\E[0;31m'"\033[1m" "$@"
}

function green() {
  formatted_echo '\E[0;32m'"\033[1m" "${@}"
}

function confirm () {
  local QUESTION="$1"
  local DEFAULT="${2:N}"

  if [[ "$DEFAULT" = "Y" ]]
  then
    local OTHER="N"
  else
    local OTHER="Y"
  fi

  echo -n "$QUESTION ["

  if [[ "$DEFAULT" = "Y" ]]
  then
    bold -n "Y"
    echo -n "/n"
  else
    echo -n "y/"
    bold -n "N"
  fi

  if [[ -n "$YES_TO_ALL" ]]
  then
    echo "] $DEFAULT"
    return 0
  else
    local CONFIRMATION
    read -n1 -p "] " CONFIRMATION
  fi

  if [[ -n "$CONFIRMATION" ]]
  then
    echo

    if [[ "$CONFIRMATION" = "n" ]]
    then
      CONFIRMATION="N"
    fi

    if [[ "$CONFIRMATION" = "y" ]]
    then
      CONFIRMATION="Y"
    fi
  fi

  if [[ "$CONFIRMATION" = "$OTHER" ]]
  then
    return 1
  else
    return 0
  fi
}

function cleanup_and_exit () {
  local CODE="$1"

  rm -f "$TMP_ENABLED_CHECKS"
  exit "$CODE"
}

function control_c () {
  # Reset the terminal if the user interrupted during a "read" question

  stty echo echok
  echo
  cleanup_and_exit 1
}

trap control_c SIGINT

function enable {
  local CMD="$1"
  local NAME="$2"

  if [[ ! -z "$3" ]]
  then
    local ARGUMENT=" $3"
  fi

  local FULL_CMD="RUN ${CMD}${ARGUMENT}"

  if checks/${CMD}${ARGUMENT} >/dev/null 2>&1
  then
    echo -n " * Enabling check for "
    bold "${NAME}"
  else
    return 1
  fi

  # There are three possibilities when enabling a check in the configuration file:
  #  1. the check already exists with a different argument:
  #      run disk_space /
  #      run disk_space /home
  #
  #  2. the check is commented:
  #      # run disk_space /
  #
  #  3. the check doesn't exist in the configuration file template

  # 1. We detect the last line number where the check is enabled.
  #      run disk_space /
  #      run disk_space /home <= this one
  local LINE_NUMBER=$(grep -n "^RUN ${CMD}" "$TMP_ENABLED_CHECKS" | cut -d":" -f1 | tail -n1)

  if [[ ! -z "$LINE_NUMBER" ]]
  then
    # We append the new check right after the last one
    #    run disk_space /
    #    run disk_space /home
    #    run disk_space /data <= new check
    #
    # sed command: 2aRUN disk_space /data
    sed -i "${LINE_NUMBER}a${FULL_CMD}" "$TMP_ENABLED_CHECKS"
    return 0
  fi

  # 2. Is there a commented line for this check?
  local COUNT=$(grep -c "^# RUN ${CMD}" "$TMP_ENABLED_CHECKS")

  if [[ $COUNT -gt 0 ]]
  then
    # There is! We replace the comment with the new check,
    #
    # sed command: 0,/^# RUN test/s//RUN test/
    #   0,/^# RUN test/  => find the first occurence of "# RUN test"
    #   s//RUN test/     => replace it with "RUN test" (we don't need to repeat the pattern)
    sed -i "0,\|^# RUN ${CMD}.*|s||${FULL_CMD}|" "$TMP_ENABLED_CHECKS"
    return 0
  fi

  # 3. The check is not in the template, we just append it at the end.
  echo "${FULL_CMD}" >> "$TMP_ENABLED_CHECKS"
  return 0
}

function detect_swap {
  # Enable swap if there is more than 0 bytes of swap on the server

  local SWAP=$(awk '{ if ($1 == "SwapTotal:" && $2 > 0) print "1" }' /proc/meminfo)

  if [[ $SWAP = "1" ]]
  then
    return 0
  else
    return 1
  fi
}

function detect_partitions {
  # Find all partitions matching:
  #  /dev/sda1   /
  #  UUID=test   /
  #  LABEL=test  /
  awk 'match($1, /^(\/|[A-Z]+=)/) && match($2, /^\//) && !match($2, /^\/media/) && !match($2, /^\/mnt/) { print $2 }' /etc/fstab
}

function detect_interfaces {
  # Find all ethX interfaces with more than 0 bytes of traffic
  awk '{ if ($2 > 0) print $1 }' /proc/net/dev | egrep '^eth.:$' | cut -d":" -f1
}

function detect_disks {
  ls /dev/sd[a-z] /dev/xvd[a-z] /dev/vd[a-z] 2>/dev/null
}

function detect_enabled_checks {
  enable "cpu.sh" "CPU"
  enable "memory_ram.sh" "RAM"
  enable "load_average.sh" "Load average"
  enable "forks.sh" "Fork rate"

  if detect_swap
  then
    enable "memory_swap.sh" "Swap"
    enable "memory_swap_paging.sh" "Swap paging"
  fi

  local PARTITIONS=$(detect_partitions)
  local PARTITION

  for PARTITION in $PARTITIONS
  do
    if [[ -d $PARTITION && -r $PARTITION ]]
    then
      enable "disk_space.sh" "Disk space: $PARTITION" "$PARTITION"
      enable "disk_inodes.sh" "Disk inodes: $PARTITION" "$PARTITION"
    fi
  done

  local DISKS=$(detect_disks)
  local DISK

  for DISK in $DISKS
  do
    if [[ -b "$DISK" ]]
    then
      DISK=$(basename "$DISK")
      enable "disk_io.sh" "IO: $DISK" "$DISK"
    fi
  done

  local IFACES=$(detect_interfaces)
  local IFACE

  for IFACE in $IFACES
  do
    enable "network_traffic.sh" "Network traffic: $IFACE" "$IFACE"
  done

  enable "network_conntrack.sh" "Netfilter Connection Tracking"

  enable "ntp_offset.sh" "NTP offset"
}

function save_config() {
  sed -i "s/^TOKEN=\$/TOKEN=$TOKEN/" "$TMP_ENABLED_CHECKS"
  mv "$TMP_ENABLED_CHECKS" "$CONFIGURATION_FILE"
}

function run_checks() {
  echo -n "Running the checks and sending the results to Mostro... "

  local OUTPUT
  OUTPUT=$( "${CRON_PATH}" --no-jitter 2>&1 )

  local RETURN_CODE="$?"

  if [[ $RETURN_CODE -gt "0" ]]
  then
    red "failed!"
    blockquote "$OUTPUT"
    return $RETURN_CODE
  else
    green "everything went fine!"
  fi

  echo
  return 0
}

function detect_cron {
  ( crontab -l | grep -q "${CRON_PATH}" ) 2>/dev/null
}

function setup_cron {
  local OUTPUT
  local CRON_COMMENT="# The Mostro agent needs to run every minute to ensure your server and checks are up."

  OUTPUT=$( ( ( crontab -l ; echo -e "${CRON_COMMENT}\n* * * * *\t${CRON_PATH}" ) | crontab - ) 2>&1 )

  local RETURN_CODE="$?"

  echo

  if [[ $RETURN_CODE -gt 0 ]]
  then
    red "We failed adding the cron!"
    blockquote "$OUTPUT"

    return 1
  else
    green "The cron will run every minute."

    return 0
  fi
}

function manual_cron {
  echo
  echo "When you're ready, add this line to your crontab"
  echo "to run the checks every minute:"
  echo
  echo -e "* * * * *\t${CRON_PATH}"
}

function all_good {
  echo
  green "Mostro is up and running."
  bold "You can head back to the dashboard to see how this server is doing!"
  echo
}

DIR=$( cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd )

if [[ -z "$DIR" ]]
then
  echo "Unable to determine running directory." 1>&2
  exit 1
fi

cd "$DIR"

if [[ -z "$CONFIGURATION_FILE_NAME" ]]
then
  CONFIGURATION_FILE_NAME="mostro.conf"
fi

CONFIGURATION_FILE="$DIR/$CONFIGURATION_FILE_NAME"
CONFIGURATION_FILE_TEMPLATE="$DIR/mostro.conf.template"

for ARG in "$@"
do
  if [[ "$ARG" = "--yes" ]]
  then
    YES_TO_ALL=1
  fi
done

CRON_PATH="$DIR/bin/cron"

# Temporary file to store the configuration until we save it at the very end
TMP_ENABLED_CHECKS=$(mktemp)

if [[ ! -f "$CONFIGURATION_FILE_TEMPLATE" ]]
then
  echo "Configuration templates missing" 1>&2
  cleanup_and_exit 1
else
  cp "$CONFIGURATION_FILE_TEMPLATE" "$TMP_ENABLED_CHECKS"
fi

TOKEN=$1

if [[ -z "$TOKEN" ]]
then
  echo "Usage: setup token" 1>&2
  cleanup_and_exit 1
fi

if ! hash curl 2>/dev/null
then
  echo "You need curl to install the mostro agent." 1>&2
  cleanup_and_exit 1
fi

cat <<-'EOF'

                                 __
           ____ ___  ____  _____/ /__________
          / __ `__ \/ __ \/ ___/ __/ ___/ __ \
         / / / / / / /_/ (__  ) /_/ /  / /_/ /
        /_/ /_/ /_/\____/____/\__/_/   \____/

EOF

bold "        Welcome to the Mostro setup assistant!"
echo
echo

if [[ -f "$CONFIGURATION_FILE" ]]
then
  echo "It seems you already have run this script."
  echo

  if confirm "Do you want to overwrite the previous configuration?" "N"
  then
    cleanup_and_exit 0
  fi

  echo
fi

echo "This script is going to detect and enable the default"
echo "basic checks for your server."
echo

if ! confirm "Are you ready to proceed?" "Y"
then
  cleanup_and_exit 0
fi

echo
detect_enabled_checks
echo

if confirm "Does this look right to you?" "Y"
then
  save_config

  echo

  if ! run_checks
  then
    cleanup_and_exit 1
  fi

  if detect_cron
  then
    echo "Looks like the cron for the agent is already setup..."
    all_good
    cleanup_and_exit 0
  else
    if hash crontab 2>/dev/null
    then
      echo "Now, you need to edit your crontab to run the checks"
      echo "every minute and send the results to Mostro."
      echo

      if confirm "Do you want me to do it for you?" "Y"
      then
        if setup_cron
        then
          all_good
          cleanup_and_exit 0
        fi
      fi
    fi

    manual_cron
    cleanup_and_exit 1
  fi
else
  save_config

  echo
  echo "The configuration has been saved."
  echo
  echo "You can now edit the configuration file and enable"
  echo "the checks that should be running on this server."

  manual_cron
  cleanup_and_exit 1
fi
