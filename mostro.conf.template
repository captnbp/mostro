##############################################################################
# Settings                                                                   #
##############################################################################

# This is the authentication token provided by Mostro.
# You can find it in the interface (Settings > Organization).
TOKEN=

# By default, your server will report using its default hostname (from the
# `hostname` command). If you want to set a more explicit name, you can set
# it with this variable.
# HOST=

# This is a list of comma-separated tags. These tags allow you to set specific
# thresholds in the triggers section for some of your servers.
# TAGS=sql,web,staging

##############################################################################
# System                                                                     #
##############################################################################

# CPU Usage
# RUN cpu.sh

# Fork rate
# RUN forks.sh

# Memory usage
# RUN memory_ram.sh

# Swap Usage
# RUN memory_swap.sh

# Swap paging
# RUN memory_swap_paging.sh

# Load average
# RUN load_average.sh

##############################################################################
# Disks                                                                      #
##############################################################################

# Disk space and inodes
# RUN disk_space.sh /
# RUN disk_inodes.sh /

# Default IO monitoring
# RUN disk_io.sh sda

# IO monitoring for EC2
# RUN disk_io.sh xvda

##############################################################################
# Network                                                                    #
##############################################################################

# Network traffic
# RUN network_traffic.sh eth0
# RUN network_traffic.sh eth1

# Netfilter Connection tracking
# RUN network_conntrack.sh

# NTP Offset
# RUN ntp_offset.sh

##############################################################################
# TCP Ping                                                                   #
##############################################################################

# TCP Ping
#
# RUN tcp.py [-h host] [-t timeout] port

# This check tries to connect to a TCP port. In this example, we test
# SSH on localhost:
#
# RUN tcp.py 22

# You can also test the connection to a remote server:
#
# RUN tcp.py -h remote-server -t 10 22

##############################################################################
# HTTP                                                                       #
##############################################################################

# HTTP Status
#
# RUN http_status.sh [check_name] [url] [curl_options]

# This check monitors a HTTP response.
# Without argument, the script will check the status of http://localhost/
#
# RUN http_status.sh

# You can specify arguments for more complex tests.
#
# In this example, he first argument ("Homepage") is used in the Mostro
# interface as a memorable name. The second argument is the URL
# that will be tested.
#
# RUN http_status.sh "Homepage" "http://www.mostro.com/"

# The check uses [curl](http://curl.haxx.se) to connect to the website.
#
# You can pass options to curl after the arguments. In this example,
# the curl --resolve option (http://curl.haxx.se/docs/manpage.html#--resolve)
# is used to force the check to connect to the local server instead of
# using the DNS record. This is useful in a load-balancing setup and you need
# to test each webserver independently.
#
# RUN http_status.sh "Homepage" "http://www.mostro.com/" --resolve 'www.mostro.com:80:127.0.0.1'


# HTTP Content
#
# RUN http_content.sh check_name url string_to_look_for [curl_options]

# This check looks for a specific string in a page.
# It can be used to make sure a website is rendered correctly, and that the
# application doesn't return a white page or a corrupted cache.

# In the example, the check will be called "Sign-in" in the Mostro dashboard.
# It will count the number of occurences of "Forgot your password"
# on the sign-in page.
#
# RUN http_content.sh "Sign-in" "https://www.mostro.com/users/sign_in" "Forgot your password"

##############################################################################
# Memcache                                                                   #
##############################################################################

# MEMCACHE_HOST=localhost

# RUN memcache.py

# RUN memcache.py 11211
# RUN memcache.py 11212

# Without argument, the default port (11211) is used.
#
# If you have multiple instances of memcached on different ports you can
# duplicate the line.
#
# By default, the check connects to localhost. You can change the
# `MEMCACHE_HOST` if you need to connect to a specific host instead.

##############################################################################
# MySQL                                                                      #
##############################################################################

# You need to create a user with limited privileges:
# GRANT USAGE ON *.* TO monitoring@localhost IDENTIFIED BY 'monitoring_secret'

# If you want to check the replication status, you need to add a privilege:
# GRANT REPLICATION CLIENT ON *.* TO monitoring@localhost

# MySQL status
#
# RUN mysql.sh -u user -p password

# Check MySQL replication on a slave server
#
# RUN mysql_replication.sh -u user -p password

##############################################################################
# PostgreSQL                                                                 #
##############################################################################

# You should create a dedicated user:
# CREATE USER monitoring WITH PASSWORD 'monitoring_secret'

# PostgreSQL status
#
# RUN postgresql.sh -u user -p password

# Check a specific PostgreSQL database status
#
# RUN postgresql_database.sh -u user -p password db_name

##############################################################################
# nginx                                                                      #
##############################################################################

# You first need to enable the stub_status module in nginx configuration:
#   location /nginx_status {
#     stub_status on;
#     allow 127.0.0.1;
#     deny all;
#   }
#
# RUN nginx.sh

# You can give the URL to the nginx status page as an argument.
# RUN nginx.sh http://localhost/nginx_status

##############################################################################
# Redis                                                                      #
##############################################################################

# REDIS_HOST=localhost
# REDIS_PASSWORD=

# Redis status
# RUN redis.sh

# You can pass a port as argument if you have multiple instances of Redis
# RUN redis.sh 6379
# RUN redis.sh 6380

# Check Redis replication on a slave server
# RUN redis_replication.sh
